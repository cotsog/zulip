#!/bin/bash
set -e
set -x

# A bit of a helper variable, default is voyager
DEPLOYMENT_TYPE="${DEPLOYMENT_TYPE:-voyager}"
# What user should we use for connecting to the database
POSTGRES_USER="${POSTGRES_USER:-postgres}"

# Shut down all services to ensure a quiescent state.
if [ -e "/var/run/supervisor.sock" ]; then
    supervisorctl stop all
fi

# Don't "terminate" psql sessions when run in docker!
if [ "$DEPLOYMENT_TYPE" != "dockervoyager" ]; then
    # Drop any open connections to any old database.  Hackishly call using
    # source because postgres user can't read /root/zulip/scripts/setup.
    source "$(dirname "$0")/terminate-psql-sessions" postgres zulip zulip_base
fi

(
# Make sure the current working directory is readable by postgres
cd /

su "$POSTGRES_USER" -c psql <<EOF
CREATE USER zulip;
ALTER ROLE zulip SET search_path TO zulip,public;
DROP DATABASE IF EXISTS zulip;
CREATE DATABASE zulip OWNER=zulip;
EOF

su "$POSTGRES_USER" -c 'psql zulip' <<EOF
CREATE SCHEMA zulip AUTHORIZATION zulip;
CREATE EXTENSION tsearch_extras SCHEMA zulip;
EOF
)

# Don't clear memcached from within the docker container
if [ "$DEPLOYMENT_TYPE" != "dockervoyager" ]; then
    # Clear memcached to avoid contamination from previous database state
    sh "$(dirname "$0")/flush-memcached"
fi

echo "Database created"

